@page "/ProductAdjustment"

@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject DialogService DialogService

<Message @ref="notificationComponent" />

<h3>Stock Adjustment</h3>

@if (ProductConsumptions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card-body p-0">
        <div class="d-flex align-items-center mb-3" style="width: 100%;">
            <!-- Add New Button -->
            <RadzenButton Click="@AddNew" Text="Add New" ButtonStyle="ButtonStyle.Success" class="me-3" />

            <!-- Search Box -->
            <div class="d-flex align-items-center border rounded me-3" style="width: fit-content;">
                <!-- Search Icon -->
                <span class="ps-2" style="font-size: 1.2rem; color: #6c757d;">
                    <i class="fas fa-search"></i>
                </span>

                <!-- Search Text Box -->
                <RadzenTextBox @bind-Value="@search" TValue="string" Placeholder="Search..." @oninput="OnSearch"
                               Style="border: none; box-shadow: none; padding-left: 0.5rem;" />
            </div>

            <!-- Export Button -->
            <div class="d-flex align-items-center border rounded me-3" style="width: fit-content;">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem;" Wrap="FlexWrap.Wrap" Style="padding-left: 0.10rem;">
                    <RadzenButton Text="Export To PDF" Icon="picture_as_pdf" Click="@(args => ExportToPdf())" />
                </RadzenStack>
            </div>

            <!-- Spacer to push dates to the right -->
            <div class="flex-grow-1"></div>

            <!-- Date Filter - Now aligned to the right with consistent widths -->
            <div class="d-flex align-items-center">
                <div class="d-flex align-items-center me-3">
                    <RadzenDatePicker @bind-Value="fromDate" DateFormat="yyyy-MM-dd" Placeholder="Select Start Date"
                                      Style="width: 180px;" />
                </div>
                <div class="d-flex align-items-center">
                    <RadzenDatePicker @bind-Value="toDate" DateFormat="yyyy-MM-dd" Placeholder="Select End Date"
                                      Style="width: 180px;" />
                </div>
            </div>
        </div>

        <RadzenDataGrid Data="@FilterProductConsumptions" TItem="ProductConsumptionDTO" PageSize="10" AllowPaging="true" AllowSorting="true" AllowFiltering="false">
            <Columns>
                <RadzenDataGridColumn TItem="ProductConsumptionDTO" Property="@nameof(ProductConsumptionDTO.ProductName)" Title="Product Name" Width="200px" />
                <RadzenDataGridColumn TItem="ProductConsumptionDTO" Property="@nameof(ProductConsumptionDTO.ReasonOfConsumed)" Title="Reason" Width="150px" />
                @* <RadzenDataGridColumn TItem="ProductConsumptionDTO" Property="@nameof(ProductConsumptionDTO.Person)" Title="Issued By" Width="200px" /> *@
                <RadzenDataGridColumn TItem="ProductConsumptionDTO" Property="@nameof(ProductConsumptionDTO.QuantityConsumed)" Title="Quantity " Width="100px" />
                <RadzenDataGridColumn TItem="ProductConsumptionDTO" Property="@nameof(ProductConsumptionDTO.DateConsumed)" Title="Date Time " Width="200px" />

                <RadzenDataGridColumn TItem="ProductConsumptionDTO" Title="Actions" Width="80px">
                    <Template Context="product">
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small"
                                      Click="() => Edit(product.Id)" style="margin-right: 5px;" title="Edit" />
                        <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small"
                                      Click="() => ConfirmDelete(product.Id)" title="Delete" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
}

@if (showModal)
{
    <div class="modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="1" style="display:block">
        <div class="modal-dialog modal-lg modal-dialog-scrollable modal-dialog-centered">
            <div class="modal-content card dataFormPop">
                <div class="modal-header">
                    <h3>@(ProductConsumption.Id > 0 ? "Edit Product Adjustment" : "Add Product Adjustment")</h3>
                </div>

                <EditForm Model="@ProductConsumption" OnValidSubmit="HandleSubmit">
                    <div class="card dataForm ">
                        <div class="row m-3">
                            <div class="col-md-4 mb-3">
                                <label class="Asterisk form-label" for="product">Reason of Adjustment</label>
                                <RadzenDropDown @bind-Value="ProductConsumption.ReasonofAdjustmentId"
                                                Data="@ReasonofAdjustments"
                                                TextProperty="Name"
                                                ValueProperty="Id"
                                                Placeholder="Select Reason"
                                                Class="w-100"
                                                AllowClear="true"
                                                AllowFiltering="true"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" />
                            </div>

                            @* <div class="col-md-4 mb-3">
                                <label class="Asterisk form-label" for="product">Issued By</label>
                                <RadzenDropDown @bind-Value="ProductConsumption.CustomerId"
                                                Data="@CustomerList"
                                                TextProperty="Name"
                                                ValueProperty="Id"
                                                Placeholder="Select Customer"
                                                Class="w-100"
                                                AllowClear="true"
                                                AllowFiltering="true"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" />
                            </div> *@
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Date</label>
                                <RadzenDatePicker @bind-Value="ProductConsumption.DateConsumed" DateFormat="yyyy-MM-dd" Class="w-100" />
                            </div>
                        </div>

                        <div class="row m-3">
                            <div class="col-md-4 mb-3">
                                <label class="Asterisk" for="product">Product</label>
                                <RadzenDropDown @bind-Value="ProductConsumption.ProductId"
                                                Data="@Products"
                                                TextProperty="Name"
                                                ValueProperty="Id"
                                                Placeholder="Select Product"
                                                Class="w-100"
                                                AllowClear="true"
                                                AllowFiltering="true"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" />
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="Asterisk">Quantity</label>
                                <InputNumber @bind-Value="ProductConsumption.QuantityConsumed" class="form-control"></InputNumber>
                            </div>
                        </div>
@* 
                        <div class="row m-3">
                            <div class="col-md-8 mb-3">
                                <label>Comments</label>
                                <RadzenTextArea @bind-Value="ProductConsumption.Comments" class="form-control"></RadzenTextArea>
                            </div>
                        </div> *@
                        <br />
                        <div class="col-md-12">
                            <RadzenButton Text="Save" ButtonStyle="ButtonStyle.Primary" Type="submit" Class="m-2" />
                            <RadzenButton Text="Cancel" ButtonStyle="ButtonStyle.Secondary" Click="CloseModal" Class="m-2" />
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {

    [Inject]
    private IProduct m_Product { get; set; }

    [Inject]
    private ILookup m_Lookup { get; set; }

    public IEnumerable<ProductConsumptionDTO> ProductConsumptions { get; set; }

    public IEnumerable<Lov> Products { get; set; }
    public IEnumerable<Lovd> CustomerList { get; set; }
    public IEnumerable<Lov> ReasonofAdjustments { get; set; }

    private bool showModal = false;

    public ProductConsumption ProductConsumption { get; set; }
    private Message notificationComponent;


    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    private IEnumerable<ProductConsumptionDTO> FilterProductConsumptions { get; set; } = new List<ProductConsumptionDTO>();

    private string search = string.Empty;

    private DateTime? _fromDate;
    private DateTime? _toDate;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();

        Products = await m_Lookup.GetAllProductList();
        CustomerList = await m_Lookup.GetAllCustomerList();
        ReasonofAdjustments = await m_Lookup.GetAllReasonofAdjustmentList();
    }

    private async Task HandleSubmit()
    {

        if (ProductConsumption.QuantityConsumed == 0)
        {
            notificationComponent.Show("Validation Summary", "Please enter a valid quantity greater than zero.", NotificationSeverity.Warning);
            return;
        }

        showModal = false;

        if (ProductConsumption.Id > 0)
        {
            ProductConsumption.DateConsumed = DateTime.Now;
            m_Product.UpdateProductConsumption(ProductConsumption);
            notificationComponent.Show("Updated Summary", "Product Adjustment has been Updated successfully", NotificationSeverity.Warning);
        }
        else
        {
            m_Product.CreateProductConsumption(ProductConsumption);
            notificationComponent.Show("Added Summary", "Product Adjustment has been Added successfully", NotificationSeverity.Success);
        }

        await LoadData();
    }



    public DateTime? fromDate
    {
        get => _fromDate;
        set
        {
            if (_fromDate != value)
            {
                _fromDate = value;
                LoadSalesHistory();
            }
        }
    }

    public DateTime? toDate
    {
        get => _toDate;
        set
        {
            if (_toDate != value)
            {
                _toDate = value;
                LoadSalesHistory();
            }
        }
    }


    private void Edit(int id)
    {
        showModal = true;

        if (id > 0)
        {
            ProductConsumption = m_Product.GetProductConsumption(id);
        }
        else
        {
            ProductConsumption = new ProductConsumption()
                {
                    DateConsumed = DateTime.Now
                };
        }
    }

    async Task ConfirmDelete(int id)
    {
        var options = new ConfirmOptions()
            {
                OkButtonText = "Yes, Delete",
                CancelButtonText = "No, Keep",
                ShowClose = true,
            };

        bool? confirmed = await DialogService.Confirm("Are you absolutely sure you want to delete this item?", "Delete Confirmation", options);

        if (confirmed == true)
        {
            await Delete(id);
        }
    }

    async Task Delete(int id)
    {
        m_Product.DeleteProductConsumption(id);
        notificationComponent.Show("Delete Summary", "Product Adjustment has been Deleted successfully", NotificationSeverity.Error);

        await LoadData();
        StateHasChanged(); // If you are managing the data source manually
    }


    private void AddNew()
    {
        ProductConsumption = new ProductConsumption()
            {
                DateConsumed = DateTime.Now,
            };

        showModal = true;
    }

    private async Task LoadData()
    {
        ProductConsumptions = await m_Product.GetAllProductConsumption(null, null);
        FilterProductConsumptions = ProductConsumptions;
    }


    private async void LoadSalesHistory()
    {
        ProductConsumptions = await m_Product.GetAllProductConsumption(fromDate, toDate);
        FilterProductConsumptions = ProductConsumptions;

        FilterData();

        StateHasChanged();
    }

    private void CloseModal()
    {
        showModal = false;
    }


    private void OnSearch(ChangeEventArgs e)
    {
        search = e.Value?.ToString() ?? string.Empty;
        FilterData();
    }

    private void FilterData()
    {
        if (string.IsNullOrWhiteSpace(search))
        {
            FilterProductConsumptions = ProductConsumptions;
        }
        else
        {
            FilterProductConsumptions = ProductConsumptions.Where(c =>
                (!string.IsNullOrEmpty(c.ProductName) && c.ProductName.Contains(search, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(c.ReasonOfConsumed.ToString()) && c.ReasonOfConsumed.ToString().Contains(search, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(c.Person) && c.Person.Contains(search, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(c.QuantityConsumed.ToString()) && c.QuantityConsumed.ToString().Contains(search, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(c.DateConsumed.ToString()) && c.DateConsumed.ToString().Contains(search, StringComparison.OrdinalIgnoreCase))
            ).ToList();
        }


        // Apply date filtering with proper date-only comparison
        if (fromDate.HasValue || toDate.HasValue)
        {
            // Convert to DateOnly for comparison (or use DateTime.Date)
            var filterFrom = fromDate?.Date ?? DateTime.MinValue;
            var filterTo = toDate?.Date.AddDays(1) ?? DateTime.MaxValue; // Add 1 day to include entire end date

            FilterProductConsumptions = FilterProductConsumptions.Where(x =>
                x.DateConsumed.Date >= filterFrom &&
                x.DateConsumed.Date < filterTo
            ).ToList();
        }
    }

    public async Task ExportToPdf()
    {
        if (!ValidationHelper.ValidateAndNotify(FilterProductConsumptions, notificationComponent))
            return;

        var document = Document.Create(container =>
        {
            container.Page(page =>
            {
                // Set individual margins
                page.MarginTop(20);     // Top margin
                page.MarginBottom(20);  // Bottom margin
                page.MarginLeft(40);    // Left margin
                page.MarginRight(40);   // Right margin

                page.Size(PageSizes.A4);
                page.DefaultTextStyle(style => style.FontSize(10));

                page.Header().Element(ComposeHeader);

                page.Content()
                    .PaddingVertical(10)
                    .Table(table =>
                    {
                        table.ColumnsDefinition(columns =>
                        {
                            columns.RelativeColumn(3);
                            columns.RelativeColumn(3);
                            columns.RelativeColumn(2);
                            columns.RelativeColumn(2);
                            columns.RelativeColumn(3);
                        });

                        // Header
                        table.Header(header =>
                        {
                            header.Cell().Background("#f5f5f5").Padding(5).Text("Product Name").Bold();
                            header.Cell().Background("#f5f5f5").Padding(5).Text("Reason").Bold();
                            header.Cell().Background("#f5f5f5").Padding(5).Text("Person").Bold();
                            header.Cell().Background("#f5f5f5").Padding(5).Text("Quantity").Bold();
                            header.Cell().Background("#f5f5f5").Padding(5).Text("Date Time").Bold();
                        });

                        // Data rows
                        foreach (var customer in FilterProductConsumptions)
                        {
                            table.Cell().PaddingVertical(5).PaddingHorizontal(5).Text(customer.ProductName);
                            table.Cell().PaddingVertical(5).PaddingHorizontal(5).Text(customer.ReasonOfConsumed);
                            table.Cell().PaddingVertical(5).PaddingHorizontal(5).Text(customer.Person);
                            table.Cell().PaddingVertical(5).PaddingHorizontal(5).Text(customer.QuantityConsumed);
                            table.Cell().PaddingVertical(5).PaddingHorizontal(5).Text(customer.DateConsumed);
                        }
                    });

                page.Footer().Row(row =>
                    {
                        row.RelativeItem().AlignLeft().Text(DateTime.Now.ToString("dd/MM/yyyy HH:mm"));
                        row.RelativeItem().AlignCenter().Text(text =>
                        {
                            text.CurrentPageNumber();
                            text.Span(" / ");
                            text.TotalPages();
                        });
                        row.RelativeItem(); // Empty space for right side (optional)
                    });
            });
        });

        using var stream = new MemoryStream();
        document.GeneratePdf(stream);

        var fileName = $"Products Adjustment_{DateTime.Now:yyyyMMddHHmmss}.pdf";
        await JSRuntime.InvokeVoidAsync("downloadFile", fileName, "application/pdf", stream.ToArray());
    }


    void ComposeHeader(IContainer container)
    {
        var company = m_Lookup.GetCompanyInfo();

        container.Row(row =>
        {
            row.RelativeItem().Column(column =>
            {
                column.Item().AlignCenter().Text($"{company.CompanyName}").Bold().FontSize(16);
                column.Item().AlignCenter().Text($"{company.Address}").FontSize(10);
                column.Item().AlignCenter().Text($"Products Adjustment Report").Bold().FontSize(10);
            });
        });
    }

}