@page "/Products"

@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject DialogService DialogService

<Message @ref="notificationComponent" />

<h3>Products</h3>

@if (Products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card-body p-0">
        <div class="d-flex align-items-center mb-3" style="width: 100%;">
            <RadzenButton Click="@AddNew" Text="Add New" ButtonStyle="ButtonStyle.Success" />

            <!-- Search Box -->
            <div class="d-flex align-items-center border rounded me-3 mx-3" style="width: fit-content;">
                <!-- Search Icon -->
                <span class="ps-2" style="font-size: 1.2rem; color: #6c757d;">
                    <i class="fas fa-search"></i> <!-- Font Awesome search icon -->
                </span>

                <!-- Search Text Box -->
                <RadzenTextBox @bind-Value="@search" TValue="string" Placeholder="Search..." @oninput="OnSearch"
                               Style="border: none; box-shadow: none; padding-left: 0.5rem;" />
            </div>

            <!-- Export Button -->
            <div class="d-flex align-items-center border rounded" style="width: fit-content;">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem;" Wrap="FlexWrap.Wrap" Style="padding-left: 0.10rem;">
                    <RadzenButton Text="Export To PDF" Icon="picture_as_pdf" Click="@(args => ExportToPdf())" />
                </RadzenStack>
            </div>
        </div>

        <RadzenDataGrid Data="@FilterProducts" TItem="Product" PageSize="10" AllowPaging="true" AllowSorting="true" AllowFiltering="false">
            <Columns>
                <RadzenDataGridColumn TItem="Product" Property="@nameof(Product.ProductNo)" Title="Product No" Width="70px" />
                <RadzenDataGridColumn TItem="Product" Title="Name" Width="150px">
                    <Template Context="product">
                        @($"{product.Name} {(product.ProductsSize?.Name != null ? $"({product.ProductsSize.Name})" : "")}")
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Product" Title="Supplier" Width="100px">
                    <Template Context="product">
                        @product.Supplier?.Name
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Product" Title="B-Price" Width="70px" TextAlign="TextAlign.Right">
                    <Template Context="item">
                        <div>৳@item.BuyingPrice.ToString("N2")</div>
                    </Template>
                </RadzenDataGridColumn>
                 
                <RadzenDataGridColumn TItem="Product" Title="S-Price" Width="70px" TextAlign="TextAlign.Right">
                    <Template Context="item">
                        <div>৳@item.SellingPrice.ToString("N2")</div>
                    </Template>
                </RadzenDataGridColumn>
                @* <RadzenDataGridColumn TItem="Product" Property="@nameof(Product.StockQty)" Title="Stock" Width="70px" /> *@

                <RadzenDataGridColumn TItem="Product" Title="Stock" Width="70px">
                    <Template Context="item">
                        <div>@item.StockQty</div>
                    </Template>
                    <FooterTemplate>
                        <div class="fw-bold">@FilterProducts.Sum(o => o.StockQty)</div>
                    </FooterTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Product" Title="Stk-Price" Width="80px" TextAlign="TextAlign.Right">
                    <Template Context="item">
                        <div>৳@item.StockPrice.ToString("N2")</div>
                    </Template>
                    <FooterTemplate>
                        <div class="text-end fw-bold">৳@FilterProducts.Sum(o => o.StockPrice).ToString("N2")</div>
                    </FooterTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Product" Title="Gift" Width="40px">
                    <Template Context="context">
                        @(context.IsFreeProductOffer ? "Yes" : "No")
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Product" Title="Actions" Width="110px">
                    <Template Context="context">
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small"
                                      Click="() => Edit(context.Id)" style="margin-right: 5px;" title="Edit" />
                        <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small"
                                      Click="() => ConfirmDelete(context.Id)" style="margin-right: 5px;" title="Delete" />
                        <RadzenButton Icon="history" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Small"
                                      Click="() => ShowSalesHistory(context.Id)" title="History" />
                        <RadzenButton Icon="local_offer" ButtonStyle="ButtonStyle.Warning" Size="ButtonSize.Small"
                                      Click="() => FreeOffer(context.Id)" title="Free Product Offer" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
}

@if (showModal)
{
    <div class="modal fade show" style="display:block;" tabindex="-1" role="dialog" aria-labelledby="modalLabel" aria-hidden="false">
        <!-- Only changed the modal-dialog div width here -->
        <div class="modal-dialog" role="document" style="max-width: 60%; width: 60%;">
            <div class="modal-content">
                <div class="modal-header">
                    <h3>@(Product.Id > 0 ? "Edit Product" : "Add Product")</h3>
                </div>

                <EditForm Model="@Product" OnValidSubmit="HandleSubmit">
                    <div class="card dataForm ">
                        <div class="row m-3">
                            <div class="col-md-4 mb-3">
                                <label class="Asterisk">Name</label>
                                <InputText @bind-Value="Product.Name" class="form-control"></InputText>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="Asterisk" for="Supplier">Supplier</label>
                                <RadzenDropDown @bind-Value="Product.SupplierId"
                                                Data="@Suppliers"
                                                TextProperty="Name"
                                                ValueProperty="Id"
                                                Placeholder="Select Supplier"
                                                Class="w-100"
                                                AllowClear="true"
                                                AllowFiltering="true"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" />
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="Asterisk" for="Category">Category</label>
                                <RadzenDropDown @bind-Value="Product.ProductCategoryId"
                                                Data="@ProductCategories"
                                                TextProperty="Name"
                                                ValueProperty="Id"
                                                Placeholder="Select Category"
                                                Class="w-100"
                                                AllowClear="true"
                                                AllowFiltering="true"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" />
                            </div>
                        </div>
                        <div class="row m-3">
                            <div class="col-md-4 mb-3">
                                <label class="Asterisk" for="UnitOfMeasurementId">Unit of Measurement</label>
                                <RadzenDropDown @bind-Value="Product.UnitOfMeasurementId"
                                                Data="@UnitOfMeasurements"
                                                TextProperty="Name"
                                                ValueProperty="Id"
                                                Placeholder="Select Supplier"
                                                Class="w-100"
                                                AllowClear="true"
                                                AllowFiltering="true"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" />
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="Sizes">Size</label>
                                <RadzenDropDown @bind-Value="Product.ProductsSizeId"
                                                Data="@Sizes"
                                                TextProperty="Name"
                                                ValueProperty="Id"
                                                Placeholder="Select Size"
                                                Class="w-100"
                                                AllowClear="true"
                                                AllowFiltering="true"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" />
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="Packaging">Packaging</label>
                                <RadzenDropDown @bind-Value="Product.PackagingId"
                                                Data="@Packaging"
                                                TextProperty="Name"
                                                ValueProperty="Id"
                                                Placeholder="Select Packaging"
                                                Class="w-100"
                                                AllowClear="true"
                                                AllowFiltering="true"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" />
                            </div>
                        </div>
                        <div class="row m-3">
                            <div class="col-md-4 mb-3">
                                <label class="Asterisk">C/B Piece</label>
                                <InputNumber @bind-Value="Product.CartunToPiece" class="form-control"></InputNumber>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="Asterisk">P/D Piece</label>
                                <InputNumber @bind-Value="Product.BoxToPiece" class="form-control"></InputNumber>
                            </div>
                        </div>
                        <div class="row m-3">
                            <div class="col-md-4 mb-3">
                                <label class="Asterisk">Buying Price</label>
                                <InputNumber @bind-Value="Product.BuyingPrice" class="form-control"></InputNumber>
                            </div>

                            <div class="col-md-4 mb-3">
                                <label class="Asterisk">Selling Price</label>
                                <InputNumber @bind-Value="Product.SellingPrice" class="form-control"></InputNumber>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label>ReOrder Level</label>
                                <InputNumber @bind-Value="Product.ReOrderLevel" class="form-control"></InputNumber>
                            </div>
                        </div>
                        <br />
                        <div class="col-md-12">
                            <RadzenButton Text="Save" ButtonStyle="ButtonStyle.Primary" Type="submit" Class="m-2" />
                            <RadzenButton Text="Cancel" ButtonStyle="ButtonStyle.Secondary" Click="CloseModal" Class="m-2" />
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}


@code {
    [Inject]
    private NavigationManager _navigationManager { get; set; }

    [Inject]
    private IProduct m_Product { get; set; }

    [Inject]
    private ISupplier m_Supplier { get; set; }

    [Inject]
    private IProductCategory m_ProductCategory { get; set; }

    [Inject]
    private ILookup m_Lookup { get; set; }



    public IEnumerable<Lov> Suppliers { get; set; }
    public IEnumerable<Lov> ProductCategories { get; set; }
    public IEnumerable<Lov> UnitOfMeasurements { get; set; }
    public IEnumerable<Lov> Sizes { get; set; }
    public IEnumerable<Lov> Packaging { get; set; }

    private Message notificationComponent;

    private bool showModal = false;

    public Product Product { get; set; }

    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    public IEnumerable<Product> Products { get; set; } = new List<Product>();
    private IEnumerable<Product> FilterProducts { get; set; } = new List<Product>();

    private string search = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();

        Suppliers = await m_Lookup.GetAllSupplierList();
        ProductCategories = await m_Lookup.GetAllProductCategoryList();
        UnitOfMeasurements = await m_Lookup.GetAllUnitOfMeasurementList();
        Sizes = await m_Lookup.GetAllSizeList();
        Packaging = await m_Lookup.GetAllPackagingList();

        

    }

    async Task ConfirmDelete(int id)
    {
        var options = new ConfirmOptions()
            {
                OkButtonText = "Yes, Delete",
                CancelButtonText = "No, Keep",
                ShowClose = true,
            };

        bool? confirmed = await DialogService.Confirm("Are you absolutely sure you want to delete this item?", "Delete Confirmation", options);

        if (confirmed == true)
        {
            await Delete(id);
        }
    }

    async Task Delete(int id)
    {
        m_Product.DeleteProduct(id);
        notificationComponent.Show("Deleted Summary", "Product has been Deleted successfully", NotificationSeverity.Error);
        await LoadData();
        StateHasChanged(); // If you are managing the data source manually
    }


    private async Task HandleSubmit()
    {

        if (string.IsNullOrWhiteSpace(Product.Name))
        {
            notificationComponent.Show("Missing Summary", "Please enter a product name.", NotificationSeverity.Warning);
            return;
        }

        if (Product.SupplierId <= 0)
        {
            notificationComponent.Show("Missing Summary", "Please select a supplier.", NotificationSeverity.Warning);
            return;
        }

        if (Product.ProductCategoryId <= 0)
        {
            notificationComponent.Show("Missing Summary", "Please select a product category.", NotificationSeverity.Warning);
            return;
        }

        if (Product.BuyingPrice <= 0)
        {
            notificationComponent.Show("Missing Summary", "Please enter a valid buying price greater than zero.", NotificationSeverity.Warning);
            return;
        }

        if (Product.SellingPrice <= 0)
        {
            notificationComponent.Show("Missing Summary", "Please enter a valid selling price greater than zero.", NotificationSeverity.Warning);
            return;
        }


        showModal = false;

        if (Product.Id > 0)
        {
            m_Product.UpdateProduct(Product);
            notificationComponent.Show("Updated Summary", "Product has been Updated successfully", NotificationSeverity.Warning);
        }
        else
        {
            m_Product.CreateProduct(Product);
            notificationComponent.Show("Added Summary", "Product has been Added successfully", NotificationSeverity.Success);

            _navigationManager.NavigateTo($"/Products", true);
        }

        await LoadData();
    }

    private void Edit(int id)
    {
        showModal = true;

        if (id > 0)
        {
            Product = Products.FirstOrDefault(s => s.Id == id) ?? new Product();
        }
        else
        {
            Product = new Product();
        }
    }

    private void ShowSalesHistory(int id)
    {
        _navigationManager.NavigateTo($"/ProductSalesChart/{id}");
    }

    private void FreeOffer(int id)
    {
        _navigationManager.NavigateTo($"/FreeProductOffer/{id}");
    }

    private void AddNew()
    {
        Product = new Product();
        showModal = true;
    }

    private async Task LoadData()
    {
        Products = await m_Product.GetAllProduct();
        Products = Products.Where(x => !x.Supplier.IsDisable);

        FilterProducts = Products.OrderBy(x => x.DisplayNameSize).ToList();
    }

    private void CloseModal()
    {
        showModal = false;
    }



    private void OnSearch(ChangeEventArgs e)
    {
        search = e.Value?.ToString() ?? string.Empty;
        FilterData();
    }

    private void FilterData()
    {
        if (string.IsNullOrWhiteSpace(search))
        {
            FilterProducts = Products;
        }
        else
        {
            FilterProducts = Products.Where(c =>
                (!string.IsNullOrEmpty(c.DisplayNameSize) && c.DisplayNameSize.Contains(search, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(c.Supplier.Name) && c.Supplier.Name.Contains(search, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(c.ProductNo.ToString()) && c.ProductNo.ToString().Contains(search, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(c.StockQty.ToString()) && c.StockQty.ToString().Contains(search, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(c.StockPrice.ToString()) && c.StockPrice.ToString().Contains(search, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(c.BuyingPrice.ToString()) && c.BuyingPrice.ToString().Contains(search, StringComparison.OrdinalIgnoreCase)) ||
                // (!string.IsNullOrEmpty(c.SellingPrice.ToString()) && c.SellingPrice.ToString().Contains(search, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(c.IsFreeProductOfferFormatted) && c.IsFreeProductOfferFormatted.Contains(search, StringComparison.OrdinalIgnoreCase))
            ).ToList();
        }


    }

    public async Task ExportToPdf()
    {
        if (!ValidationHelper.ValidateAndNotify(FilterProducts, notificationComponent))
            return;

        var document = Document.Create(container =>
        {
            container.Page(page =>
            {
                // Set individual margins
                page.MarginTop(20);     // Top margin
                page.MarginBottom(20);  // Bottom margin
                page.MarginLeft(40);    // Left margin
                page.MarginRight(40);   // Right margin

                page.Size(PageSizes.A4);
                page.DefaultTextStyle(style => style.FontSize(10));

                page.Header().Element(ComposeHeader);

                page.Content()
                    .PaddingVertical(10)
                    .Table(table =>
                    {
                        table.ColumnsDefinition(columns =>
                        {
                            columns.RelativeColumn(2);
                            columns.RelativeColumn(4);
                            columns.RelativeColumn(2);
                            columns.RelativeColumn(2);
                            columns.RelativeColumn(2);
                            // columns.RelativeColumn(2);
                            columns.RelativeColumn(2);
                            columns.RelativeColumn(2);
                        });

                        // Header
                        table.Header(header =>
                        {
                            header.Cell().Background("#f5f5f5").Padding(5).Text("Product No").Bold();
                            header.Cell().Background("#f5f5f5").Padding(5).Text("Product Name").Bold();
                            header.Cell().Background("#f5f5f5").Padding(5).Text("Supplier Name").Bold();
                            header.Cell().Background("#f5f5f5").Padding(5).Text("Buying Price").Bold();
                            // header.Cell().Background("#f5f5f5").Padding(5).Text("Selling Price").Bold();
                            header.Cell().Background("#f5f5f5").Padding(5).Text("Stock Qty").Bold();
                            header.Cell().Background("#f5f5f5").Padding(5).Text("Stock Price").Bold();
                            header.Cell().Background("#f5f5f5").Padding(5).Text("Free ").Bold();
                        });

                        // Data rows
                        foreach (var customer in FilterProducts)
                        {
                            table.Cell().PaddingVertical(5).PaddingHorizontal(5).Text(customer.ProductNo.ToString());
                            table.Cell().PaddingVertical(5).PaddingHorizontal(5).Text(customer.DisplayNameSize);
                            table.Cell().PaddingVertical(5).PaddingHorizontal(5).Text(customer.Supplier.Name);
                            table.Cell().PaddingVertical(5).PaddingHorizontal(5).Text($"৳{customer.BuyingPrice:N2}");
                            // table.Cell().PaddingVertical(5).PaddingHorizontal(5).Text($"৳{customer.SellingPrice:N2}");
                            table.Cell().PaddingVertical(5).PaddingHorizontal(5).Text(customer.StockQty.ToString());
                            table.Cell().PaddingVertical(5).PaddingHorizontal(5).Text($"৳{customer.StockPrice:N2}");
                            table.Cell().PaddingVertical(5).PaddingHorizontal(5).Text(customer.IsFreeProductOfferFormatted);

                        }

                        // Total Row
                        table.Cell().ColumnSpan(4).PaddingVertical(5).PaddingHorizontal(5).AlignRight().Text("").Bold();
                        table.Cell().PaddingVertical(5).PaddingHorizontal(5).Text($"{FilterProducts.Sum(x => x.StockQty)}").Bold();
                        table.Cell().PaddingVertical(5).PaddingHorizontal(5).Text($"৳{FilterProducts.Sum(x => x.StockPrice):N2}").Bold();

                    });

                page.Footer().Row(row =>
                    {
                        row.RelativeItem().AlignLeft().Text(DateTime.Now.ToString("dd/MM/yyyy HH:mm"));
                        row.RelativeItem().AlignCenter().Text(text =>
                        {
                            text.CurrentPageNumber();
                            text.Span(" / ");
                            text.TotalPages();
                        });
                        row.RelativeItem(); // Empty space for right side (optional)
                    });
            });
        });

        using var stream = new MemoryStream();
        document.GeneratePdf(stream);

        var fileName = $"Product Histories_{DateTime.Now:yyyyMMddHHmmss}.pdf";
        await JSRuntime.InvokeVoidAsync("downloadFile", fileName, "application/pdf", stream.ToArray());
    }


    void ComposeHeader(IContainer container)
    {
        var company = m_Lookup.GetCompanyInfo();

        container.Row(row =>
        {
            row.RelativeItem().Column(column =>
            {
                column.Item().AlignCenter().Text($"{company.CompanyName}").Bold().FontSize(16);
                column.Item().AlignCenter().Text($"{company.Address}").FontSize(10);
                column.Item().AlignCenter().Text($"Product Histories Report").Bold().FontSize(10);
            });
        });
    }

}