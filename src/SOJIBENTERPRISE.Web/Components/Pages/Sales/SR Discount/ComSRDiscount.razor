@page "/SRDiscount/{DSRCustomerId:int}/{OrderId:int}"

@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject NotificationService NotificationService
@inject DialogService DialogService

<Message @ref="notificationComponent" />

<h3>Discount History</h3>

@if (SRDiscountByOrderList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card-body p-0">
        <RadzenButton Text="Back" ButtonStyle="ButtonStyle.Secondary" Click="Cancel" Class="m-2" />
        <RadzenButton Click="@AddNew" Text="Add New" ButtonStyle="ButtonStyle.Success"></RadzenButton>

        <RadzenDataGrid Data="@SRDiscountByOrderList" TItem="SRDiscountDTO" PageSize="10" AllowPaging="true" AllowSorting="true" AllowFiltering="false">
            <Columns>
                <RadzenDataGridColumn TItem="SRDiscountDTO" Title="Issued By" Width="100px">
                    <Template Context="item">
                        <div>@item.DSRName</div>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="SRDiscountDTO" Title="Referred By" Width="100px">
                    <Template Context="item">
                        <div>@item.SRName</div>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="SRDiscountDTO" Title="Amount" Width="100px" TextAlign="TextAlign.Right">
                    <Template Context="item">
                        <div>৳@item.DiscountAmount.ToString("N2")</div>
                    </Template>
                    <FooterTemplate>
                        <div class="text-end fw-bold">৳@SRDiscountByOrderList.Sum(o => o.DiscountAmount).ToString("N2")</div>
                    </FooterTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="SRDiscountDTO" Title="Actions" Width="60px">
                    <Template Context="context">
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small"
                                      Click="() => Edit(context.Id)" style="margin-right: 5px;" title="Edit" />
                        <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small"
                                      Click="() => ConfirmDelete(context.Id)" title="Delete" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
}

@if (showModal)
{
    <div class="modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="1" style="display:block">
        <div class="modal-dialog modal-lg modal-dialog-scrollable modal-dialog-centered">
            <div class="modal-content card dataFormPop">
                <div class="modal-header">
                    <h3>@(SRDiscount.Id > 0 ? "Edit Discount" : "Add Discount")</h3>
                </div>

                <EditForm Model="@SRDiscount" OnValidSubmit="HandleSubmit">
                    <div class="card dataForm ">
                        <div class="row m-3">
                            <div class="col-md-4 mb-3">
                                <label class="Asterisk form-label">Person</label>
                                <RadzenDropDown @bind-Value="SRDiscount.CustomerId"
                                                Data="@CustomerList"
                                                TextProperty="Name"
                                                ValueProperty="Id"
                                                Placeholder="Search SR"
                                                Class="w-100"
                                                AllowClear="true"
                                                AllowFiltering="true"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" />
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="Asterisk form-label">Discount Amount</label>
                                <InputNumber @bind-Value="SRDiscount.DiscountAmount" class="form-control"></InputNumber>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Date</label>
                                <RadzenDatePicker @bind-Value="SRDiscount.Date" DateFormat="yyyy-MM-dd" Class="w-100" />
                            </div>
                        </div>
                        <br />
                        <div class="col-md-12">
                            <RadzenButton Text="Save" ButtonStyle="ButtonStyle.Primary" Type="submit" Class="m-2" />
                            <RadzenButton Text="Cancel" ButtonStyle="ButtonStyle.Secondary" Click="Cancel" Class="m-2" />
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}


@code {
    [Parameter]
    public int DSRCustomerId { get; set; }

    [Parameter]
    public int OrderId { get; set; }

    [Inject]
    private ISRDiscount m_SRDiscount { get; set; }

    [Inject]
    private ILookup m_Lookup { get; set; }

    [Inject]
    private NavigationManager _navigationManager { get; set; }

    private Message notificationComponent;

    private IEnumerable<Lovd> CustomerList { get; set; } = new List<Lovd>();
    private IEnumerable<SRDiscountDTO> SRDiscountByOrderList { get; set; } = new List<SRDiscountDTO>();

    public SRDiscount SRDiscount { get; set; } = new();
    private bool showModal = false;

    protected override async Task OnInitializedAsync()
    {
        var personList = await m_Lookup.GetAllCustomerList();
        CustomerList = personList.Where(x => x.Desc == "SR").ToList();

        //CustomerList = CustomerList.Where(c => !c.IsDeleted);
        LoadData();
    }

    private async Task HandleSubmit()
    {

        if (SRDiscount.DiscountAmount <= 0)
        {
            notificationComponent.Show("Empty Amount", "Discount Amount can not be 0.", NotificationSeverity.Warning);
            return;
        }

        if (SRDiscount.CustomerId <= 0)
        {
            notificationComponent.Show("Empty Person", "Person Must be select.", NotificationSeverity.Warning);
            return;
        }

        showModal = false;

        if (SRDiscount.Id > 0)
        {
            m_SRDiscount.UpdateSRDiscount(SRDiscount);
            notificationComponent.Show("Updated Summary", "SR Discount has been Updated successfully", NotificationSeverity.Warning);
        }
        else
        {
            m_SRDiscount.CreateSRDiscount(SRDiscount);
            notificationComponent.Show("Added Summary", "SR Discount has been Added successfully", NotificationSeverity.Success);
        }

        LoadData();
        StateHasChanged();

        // _navigationManager.NavigateTo($"/Sales");
    }

    private void Edit(int id)
    {
        showModal = true;

        if (id > 0)
        {
            SRDiscount = m_SRDiscount.GetSRDiscountById(id);
        }
        else
        {
            SRDiscount = new SRDiscount()
            {
                OrderId = OrderId,
                DSRCustomerId = DSRCustomerId,
                Date = m_Lookup.GetOrderDate(OrderId),
            };
        }
    }

    async Task ConfirmDelete(int id)
    {
        var options = new ConfirmOptions()
        {
            OkButtonText = "Yes, Delete",
            CancelButtonText = "No, Keep",
            ShowClose = true,
        };

        bool? confirmed = await DialogService.Confirm("Are you absolutely sure you want to delete this item?", "Delete Confirmation", options);

        if (confirmed == true)
        {
            await Delete(id);
        }
    }

    async Task Delete(int id)
    {
        m_SRDiscount.DeleteSRDiscount(id);
        notificationComponent.Show("Delete Summary", "SRDiscount has been Deleted successfully", NotificationSeverity.Error);

        LoadData();
        StateHasChanged(); // If you are managing the data source manually
    }


    private void LoadData()
    {
        SRDiscountByOrderList = m_SRDiscount.GetAllSRDiscount_ByOrderId(OrderId);
    }



    private void AddNew()
    {
        SRDiscount = new SRDiscount()
        {
            OrderId = OrderId,
            DSRCustomerId = DSRCustomerId,
            Date = m_Lookup.GetOrderDate(OrderId),
        };

        showModal = true;
    }

    private void Cancel()
    {
        _navigationManager.NavigateTo($"/Sales");
    }
}
