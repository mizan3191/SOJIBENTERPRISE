@page "/DamageProductHandoverSummary"

@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject DialogService DialogService

<Message @ref="notificationComponent" />

<h3>Damage Handover Summary</h3>

@if (FilterDamageProductHandoverSummaryList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card-body p-0">
        <div class="d-flex align-items-center mb-3" style="width: 100%;">
            <RadzenButton Click="@AddNew" Text="Add New" ButtonStyle="ButtonStyle.Success" />

            <!-- Search Box -->
            <div class="d-flex align-items-center border rounded me-3 mx-3" style="width: fit-content;">
                <!-- Search Icon -->
                <span class="ps-2" style="font-size: 1.2rem; color: #6c757d;">
                    <i class="fas fa-search"></i> <!-- Font Awesome search icon -->
                </span>

                <!-- Search Text Box -->
                <RadzenTextBox @bind-Value="@search" TValue="string" Placeholder="Search..." @oninput="OnSearch"
                               Style="border: none; box-shadow: none; padding-left: 0.5rem;" />
            </div>

            <!-- Export Button -->
            <div class="d-flex align-items-center border rounded" style="width: fit-content;">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem;" Wrap="FlexWrap.Wrap" Style="padding-left: 0.10rem;">
                    <RadzenButton Text="Export To PDF" Icon="picture_as_pdf" Click="@(args => ExportToPdf())" />
                </RadzenStack>
            </div>
        </div>

        <RadzenDataGrid Data="@FilterDamageProductHandoverSummaryList" TItem="DamageProductHandoverSummary" PageSize="10" AllowPaging="true" AllowSorting="true" AllowFiltering="false">
            <Columns>
                <RadzenDataGridColumn TItem="DamageProductHandoverSummary" Property="@nameof(DamageProductHandoverSummary.SupplierName)" Title="Supplier Name" Width="200px" />
                <RadzenDataGridColumn TItem="DamageProductHandoverSummary" Title="Total Due" Width="200px" TextAlign="TextAlign.Right">
                    <Template Context="item">
                        <div>৳@item.TotalDueAmount.ToString("N2")</div>
                    </Template>
                    <FooterTemplate>
                        <div class="text-end fw-bold">৳@FilterDamageProductHandoverSummaryList.Sum(o => o.TotalDueAmount).ToString("N2")</div>
                    </FooterTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="DamageProductHandoverSummary" Title="Actions" Width="180px">
                    <Template Context="context">

                        <RadzenButton Icon="view_list" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Small"
                                      Click="() => DamageProductHandoverList(context.SupplierId)" style="margin-right: 5px;" title="Damage Product Handover List" />

                        <RadzenButton Icon="description" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Small"
                                      Click="() => OrderDetails(context.SupplierId)" style="margin-right: 5px;" title="Details" />

                        <RadzenButton Icon="account_balance_wallet" ButtonStyle="ButtonStyle.Warning" Size="ButtonSize.Small"
                                      Click="() => DuePaymentSummary(context.SupplierId)" style="margin-right: 5px;" title="Due Payment Summary" />

                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
}


@if (showModal)
{
    <div class="modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="1" style="display:block">
        <div class="modal-dialog modal-lg modal-dialog-scrollable modal-dialog-centered">
            <div class="modal-content card dataFormPop">
                <div class="modal-header">
                    <h3>@(DamageProductHandoverPaymentHistory.Id > 0 ? "Edit Damage Handover Payment" : "Add Damage Handover Payment")</h3>
                </div>

                <EditForm Model="@DamageProductHandoverPaymentHistory" OnValidSubmit="HandleSubmit">
                    <div class="card dataForm ">
                        <div class="row m-3">
                            <div class="col-md-4 mb-3">
                                <label class="Asterisk form-label">Date</label>
                                <RadzenDatePicker @bind-Value="DamageProductHandoverPaymentHistory.Date" DateFormat="yyyy-MM-dd" Class="w-100" />
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="Asterisk form-label">Supplier</label>
                                <RadzenDropDown @bind-Value="DamageProductHandoverPaymentHistory.SupplierId"
                                                Data="@SupplierList"
                                                TextProperty="Name"
                                                ValueProperty="Id"
                                                Class="w-100"
                                                AllowClear="true"
                                                Placeholder="Search Supplier"
                                                AllowFiltering="true"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                Change="@OnCustomerChanged" />
                            </div>
                        </div>
                        <div class="row m-3">
                            <div class="col-md-4 mb-3">
                                <label class="Asterisk form-label">Due Amount</label>
                                <InputNumber @bind-Value="DueAmount" class="form-control" disabled></InputNumber>
                            </div>

                            <div class="col-md-4 mb-3">
                                <label class="Asterisk form-label">Amount Paid</label>
                                <InputNumber @bind-Value="DamageProductHandoverPaymentHistory.AmountPaid" class="form-control"></InputNumber>
                            </div>
                            @* <div class="col-md-4 mb-3">
                                <label class="Asterisk form-label">Issued By</label>
                                <RadzenDropDown @bind-Value="DamageProductHandoverPaymentHistory.CustomerId"
                                                Data="@CustomerList"
                                                TextProperty="Name"
                                                ValueProperty="Id"
                                                Class="w-100"
                                                AllowClear="true"
                                                AllowFiltering="true"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" />
                            </div> *@
                        </div>
                        <br />
                        <div class="col-md-12">
                            <RadzenButton Text="Save" ButtonStyle="ButtonStyle.Primary" Type="submit" Class="m-2" />
                            <RadzenButton Text="Cancel" ButtonStyle="ButtonStyle.Secondary" Click="CloseModal" Class="m-2" />
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}



@code {
    [Inject]
    private ILookup m_Lookup { get; set; }

    [Inject]
    private IDamageProductHandover m_DamageProductHandover { get; set; }

    [Inject]
    private IDamageProductHandoverPaymentHistory m_DamageProductHandoverPaymentHistory { get; set; }

    [Inject]
    private NavigationManager _navigationManager { get; set; }

    public IEnumerable<DamageProductHandoverSummary> DamageProductHandoverSummaryList { get; set; } = new List<DamageProductHandoverSummary>();

    private IEnumerable<Lovd> CustomerList { get; set; } = new List<Lovd>();
    private IEnumerable<Lov> SupplierList { get; set; } = new List<Lov>();

    private bool showModal = false;
    private double DueAmount { get; set; } = 0;

    public DamageProductHandoverPaymentHistory DamageProductHandoverPaymentHistory { get; set; }
    private Message notificationComponent;


    private IEnumerable<DamageProductHandoverSummary> FilterDamageProductHandoverSummaryList { get; set; } = new List<DamageProductHandoverSummary>();

    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    private string search = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        CustomerList = await m_Lookup.GetAllCustomerList();
        SupplierList = await m_Lookup.GetAllSupplierList();

        ////CustomerList = CustomerList.Where(c => !c.IsDeleted);
        ////SupplierList = SupplierList.Where(c => !c.IsDeleted);
        await LoadData();
    }


    private void AddNew()
    {
        DamageProductHandoverPaymentHistory = new DamageProductHandoverPaymentHistory()
        {
            Date = DateTime.Now,
        };
        showModal = true;
    }

    private async Task LoadData()
    {
        DueAmount = 0;

        DamageProductHandoverSummaryList = await m_DamageProductHandover.GetTotalAmountSupplierWiseAsync();
        FilterDamageProductHandoverSummaryList = DamageProductHandoverSummaryList;
    }

    private async Task HandleSubmit()
    {

        // if (DamageProductHandoverPaymentHistory.CustomerId <= 0 || DamageProductHandoverPaymentHistory.CustomerId is null)
        // {
        //     notificationComponent.Show("Validation Error", "Please select an Issued By Name before proceeding.", NotificationSeverity.Warning);
        //     return;
        // }

        if (DamageProductHandoverPaymentHistory.SupplierId <= 0)
        {
            notificationComponent.Show("Validation Error", "Please select an Supplier Name before proceeding.", NotificationSeverity.Warning);
            return;
        }

        if (DamageProductHandoverPaymentHistory.AmountPaid <= 0)
        {
            notificationComponent.Show("Validation Error", "Paid amount must be greater than zero.", NotificationSeverity.Warning);
            return;
        }

        showModal = false;

        if (DamageProductHandoverPaymentHistory.Id > 0)
        {
            m_DamageProductHandoverPaymentHistory.UpdateDamageProductHandoverPaymentHistory(DamageProductHandoverPaymentHistory);
            notificationComponent.Show("Updated Summary", "SR Payment History has been Updated successfully", NotificationSeverity.Warning);
        }
        else
        {
            m_DamageProductHandoverPaymentHistory.CreateDamageProductHandoverPaymentHistory(DamageProductHandoverPaymentHistory);
            notificationComponent.Show("Added Summary", "SR Payment History has been Added successfully", NotificationSeverity.Success);
        }

        DueAmount = 0;
        await LoadData();
        StateHasChanged();
    }

    private async Task OnCustomerChanged(object value)
    {
        if (value is int supplierId)
        {
            DueAmount = DamageProductHandoverSummaryList
                .Where(x => x.SupplierId == supplierId)
                .Sum(x => x.TotalDueAmount);
        }
    }

    private void OrderDetails(int supplierId)
    {
        _navigationManager.NavigateTo($"/DamageProductPaymentDetails/{supplierId}");
    }

    private void DamageProductHandoverList(int supplierId)
    {
        _navigationManager.NavigateTo($"/DamageProductHandoverList/{supplierId}");
    }

    private void DuePaymentSummary(int supplierId)
    {
        _navigationManager.NavigateTo($"/DamageProductDuePaymentSummary/{supplierId}");
    }

    private void CloseModal()
    {
        showModal = false;
        DueAmount = 0;
    }


    private void OnSearch(ChangeEventArgs e)
    {
        search = e.Value?.ToString() ?? string.Empty;
        FilterData();
    }

    private void FilterData()
    {
        if (string.IsNullOrWhiteSpace(search))
        {
            FilterDamageProductHandoverSummaryList = DamageProductHandoverSummaryList;
        }
        else
        {
            FilterDamageProductHandoverSummaryList = DamageProductHandoverSummaryList.Where(c =>
                (!string.IsNullOrEmpty(c.SupplierName) && c.SupplierName.Contains(search, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(c.TotalDueAmount.ToString()) && c.TotalDueAmount.ToString().Contains(search, StringComparison.OrdinalIgnoreCase))
            ).ToList();
        }


    }

    public async Task ExportToPdf()
    {
        if (!ValidationHelper.ValidateAndNotify(FilterDamageProductHandoverSummaryList, notificationComponent))
            return;

        var document = Document.Create(container =>
        {
            container.Page(page =>
            {
                // Set individual margins
                page.MarginTop(20);     // Top margin
                page.MarginBottom(20);  // Bottom margin
                page.MarginLeft(40);    // Left margin
                page.MarginRight(40);   // Right margin

                page.Size(PageSizes.A4);
                page.DefaultTextStyle(style => style.FontSize(10));

                page.Header().Element(ComposeHeader);

                page.Content()
                    .PaddingVertical(10)
                    .Table(table =>
                    {
                        table.ColumnsDefinition(columns =>
                        {
                            columns.RelativeColumn(3);
                            columns.RelativeColumn(3);
                        });

                        // Header
                        table.Header(header =>
                        {
                            header.Cell().Background("#f5f5f5").Padding(5).Text("Name").Bold();
                            header.Cell().Background("#f5f5f5").Padding(5).Text("Total Amount").Bold();
                        });

                        // Data rows
                        foreach (var customer in FilterDamageProductHandoverSummaryList)
                        {
                            table.Cell().PaddingVertical(5).PaddingHorizontal(5).Text(customer.SupplierName);
                            table.Cell().PaddingVertical(5).PaddingHorizontal(5).Text($"৳{customer.TotalDueAmount:N2}");
                        }

                        // Total Row
                        table.Cell().ColumnSpan(1).PaddingVertical(5).PaddingHorizontal(5).AlignRight().Text("Total").Bold();
                        table.Cell().PaddingVertical(5).PaddingHorizontal(5).Text($"৳{FilterDamageProductHandoverSummaryList.Sum(x => x.TotalDueAmount):N2}").Bold();

                    });

                page.Footer().Row(row =>
                    {
                        row.RelativeItem().AlignLeft().Text(DateTime.Now.ToString("dd/MM/yyyy HH:mm"));
                        row.RelativeItem().AlignCenter().Text(text =>
                        {
                            text.CurrentPageNumber();
                            text.Span(" / ");
                            text.TotalPages();
                        });
                        row.RelativeItem(); // Empty space for right side (optional)
                    });
            });
        });

        using var stream = new MemoryStream();
        document.GeneratePdf(stream);

        var fileName = $"Damage Product Handover Summary_{DateTime.Now:yyyyMMddHHmmss}.pdf";
        await JSRuntime.InvokeVoidAsync("downloadFile", fileName, "application/pdf", stream.ToArray());
    }

    void ComposeHeader(IContainer container)
    {
        var company = m_Lookup.GetCompanyInfo();

        container.Row(row =>
        {
            row.RelativeItem().Column(column =>
            {
                column.Item().AlignCenter().Text($"{company.CompanyName}").Bold().FontSize(16);
                column.Item().AlignCenter().Text($"{company.Address}").FontSize(10);
                column.Item().AlignCenter().Text($"Damage Product Handover Summary Report").Bold().FontSize(10);
            });
        });
    }
}