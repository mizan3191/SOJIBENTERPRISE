@page "/ShopPaymentList/{ShopId:int}"

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@inject DialogService DialogService

<Message @ref="notificationComponent" />
<h3>@ShopName Payment Histories</h3>

<div class="card-body pt-3">

    <div class="d-flex align-items-center mb-3" style="width: 100%;">
        <!-- Back Button -->
        <RadzenButton Text="Back" ButtonStyle="ButtonStyle.Secondary" Click="Cancel" Class="m-2" />

        <!-- Search Box -->
        <div class="d-flex align-items-center border rounded me-3" style="width: fit-content;">
            <!-- Search Icon -->
            <span class="ps-2" style="font-size: 1.2rem; color: #6c757d;">
                <i class="fas fa-search"></i>
            </span>

            <!-- Search Text Box -->
            <RadzenTextBox @bind-Value="@search" TValue="string" Placeholder="Search..." @oninput="OnSearch"
                           Style="border: none; box-shadow: none; padding-left: 0.5rem;" />
        </div>

        <!-- Export Button -->
        <div class="d-flex align-items-center border rounded me-3" style="width: fit-content;">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem;" Wrap="FlexWrap.Wrap" Style="padding-left: 0.10rem;">
                <RadzenButton Text="Export To PDF" Icon="picture_as_pdf" Click="@(args => ExportToPdf())" />
            </RadzenStack>
        </div>

        <!-- Spacer to push dates to the right -->
        <div class="flex-grow-1"></div>

        <!-- Date Filter - Now aligned to the right with consistent widths -->
        <div class="d-flex align-items-center">
            <div class="d-flex align-items-center me-3">
                <RadzenDatePicker @bind-Value="fromDate" DateFormat="yyyy-MM-dd" Placeholder="Select Start Date"
                                  Style="width: 180px;" />
            </div>
            <div class="d-flex align-items-center">
                <RadzenDatePicker @bind-Value="toDate" DateFormat="yyyy-MM-dd" Placeholder="Select End Date"
                                  Style="width: 180px;" />
            </div>
        </div>
    </div>

    <RadzenDataGrid Data="@FilterDSRShopPaymentHistoryList" TItem="DSRShopPaymentHistory" PageSize="10" AllowPaging="true" AllowSorting="true" AllowFiltering="false">
        <Columns>
            <RadzenDataGridColumn TItem="DSRShopPaymentHistory" Title="Shop Name" Width="200px">
                <Template Context="item">
                    <div>@item.Shop.Name</div>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="DSRShopPaymentHistory" Title="Paid Amount" Width="150px" TextAlign="TextAlign.Right">
                <Template Context="item">
                    <div>৳@item.AmountPaid.ToString("N2")</div>
                </Template>
                <FooterTemplate>
                    <div class="text-end fw-bold">৳@FilterDSRShopPaymentHistoryList.Sum(o => o.AmountPaid).ToString("N2")</div>
                </FooterTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="DSRShopPaymentHistory" Title="Referred By" Width="200px">
                <Template Context="item">
                    <div>@item.Customer.Name</div>
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="DSRShopPaymentHistory" Title="Payment Method" Width="200px">
                <Template Context="item">
                    <div>@item.PaymentMethodFormatted</div>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="DSRShopPaymentHistory" Property="@nameof(DSRShopPaymentHistory.PaymentDate)" Title="Date Time" Width="200px" />
            <RadzenDataGridColumn TItem="DSRShopPaymentHistory" Title="Actions" Width="100px">
                <Template Context="context">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small"
                                  Click="() => Edit(context.Id)" style="margin-right: 5px;" title="Edit" />
                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small"
                                  Click="() => ConfirmDelete(context.Id)" title="Delete" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</div>


@if (showModal)
{
    <div class="modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="1" style="display:block">
        <div class="modal-dialog modal-lg modal-dialog-scrollable modal-dialog-centered">
            <div class="modal-content card dataFormPop">
                <div class="modal-header">
                    <h3>@(DSRShopPaymentHistory.Id > 0 ? "Edit Shop Payment" : "Add Shop Payment")</h3>
                </div>

                <EditForm Model="@DSRShopPaymentHistory" OnValidSubmit="HandleSubmit">
                    <div class="card dataForm ">
                        <div class="row m-3">
                            <div class="col-md-4 mb-3">
                                <label class="Asterisk">Referred By</label>
                                <RadzenDropDown @bind-Value="DSRShopPaymentHistory.CustomerId"
                                                Data="@CustomerList"
                                                TextProperty="Name"
                                                ValueProperty="Id"
                                                Placeholder="Search"
                                                Class="w-100"
                                                AllowFiltering="false"
                                                Disabled
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" />
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="Asterisk">Shop Name</label>
                                <RadzenDropDown @bind-Value="DSRShopPaymentHistory.ShopId"
                                                Data="@ShopList"
                                                TextProperty="Name"
                                                ValueProperty="Id"
                                                Placeholder="Search Shop Name"
                                                Class="w-100"
                                                Disabled
                                                AllowFiltering="false"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" />
                            </div>
                        </div>
                        <div class="row m-3">
                            <div class="col-md-4 mb-3">
                                <label>Due Amount</label>
                                <InputNumber @bind-Value="DueAmount" class="form-control " disabled></InputNumber>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="Asterisk">Amount Paid</label>
                                <InputNumber @bind-Value="DSRShopPaymentHistory.AmountPaid" class="form-control"></InputNumber>
                            </div>
                        </div>
                        <br />
                        <div class="col-md-12">
                            <RadzenButton Text="Save" ButtonStyle="ButtonStyle.Primary" Type="submit" Class="m-2" />
                            <RadzenButton Text="Cancel" ButtonStyle="ButtonStyle.Secondary" Click="CloseModal" Class="m-2" />
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int ShopId { get; set; }

    [Inject]
    private ICustomer m_Customer { get; set; }

    [Inject]
    private IDSRShopPaymentHistory m_DSRShopPaymentHistory { get; set; }

    [Inject]
    private NavigationManager _navigationManager { get; set; }

    [Inject]
    private ILookup m_Lookup { get; set; }

    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    public DSRShopPaymentHistory DSRShopPaymentHistory { get; set; }
    private Message notificationComponent;

    private bool showModal = false;
    private double DueAmount { get; set; } = 0;

    public IEnumerable<DSRShopPaymentHistory> DSRShopPaymentHistoryList { get; set; } = new List<DSRShopPaymentHistory>();
    public IEnumerable<DSRShopPaymentHistory> FilterDSRShopPaymentHistoryList { get; set; } = new List<DSRShopPaymentHistory>();
    public IEnumerable<DSRDueSummary> DSRDueSummaryList { get; set; } = new List<DSRDueSummary>();

    private IEnumerable<Lovd> CustomerList { get; set; } = new List<Lovd>();
    private IEnumerable<Lov> ShopList { get; set; } = new List<Lov>();

    private string search = string.Empty;
    private string ShopName = string.Empty;

    private DateTime? _fromDate;
    private DateTime? _toDate;

    protected override async Task OnInitializedAsync()
    {
        ShopName = m_Lookup.GetShop(ShopId).Name;
        CustomerList = await m_Lookup.GetAllCustomerList();
        ShopList = await m_Lookup.GetAllShopList();

        //CustomerList = CustomerList.Where(c => !c.IsDeleted);
        //ShopList = ShopList.Where(c => !c.IsDeleted);

        await LoadData();
    }

    private async Task HandleSubmit()
    {
        if (DSRShopPaymentHistory.CustomerId <= 0)
        {
            notificationComponent.Show("Validation Error", "Please select an Issued By before proceeding.", NotificationSeverity.Warning);
            return;
        }

        if (DSRShopPaymentHistory.ShopId <= 0)
        {
            notificationComponent.Show("Validation Error", "Please select an shop before proceeding.", NotificationSeverity.Warning);
            return;
        }

        if (DSRShopPaymentHistory.AmountPaid <= 0)
        {
            notificationComponent.Show("Validation Error", "Paid amount must be greater than zero.", NotificationSeverity.Warning);
            return;
        }


        showModal = false;

        if (DSRShopPaymentHistory.Id > 0)
        {
            m_DSRShopPaymentHistory.UpdateDSRShopPaymentHistory(DSRShopPaymentHistory);
            notificationComponent.Show("Updated Summary", "Shop Payment History has been Updated successfully", NotificationSeverity.Warning);
        }
        else
        {
            m_DSRShopPaymentHistory.CreateDSRShopPaymentHistory(DSRShopPaymentHistory);
            notificationComponent.Show("Added Summary", "Shop Payment History has been Added successfully", NotificationSeverity.Success);
        }

        await LoadData();
        StateHasChanged();
    }


    private async Task LoadData()
    {
        DSRShopPaymentHistoryList = await m_DSRShopPaymentHistory.GetAllDSRShopPaymentHistory(ShopId);
        FilterDSRShopPaymentHistoryList = DSRShopPaymentHistoryList;
    }

    private void Edit(int id)
    {
        showModal = true;

        if (id > 0)
        {

            DSRShopPaymentHistory = m_DSRShopPaymentHistory.GetDSRShopPaymentHistory(id);

            DueAmount = DSRDueSummaryList
                .Where(x => x.ShopId == ShopId)
                .Sum(x => x.TotalShopDueAmount);
        }
        else
        {
            DSRShopPaymentHistory = new DSRShopPaymentHistory()
                {
                    PaymentDate = DateTime.Now,
                };
        }
    }

    async Task ConfirmDelete(int id)
    {
        var options = new ConfirmOptions()
            {
                OkButtonText = "Yes, Delete",
                CancelButtonText = "No, Keep",
                ShowClose = true,
            };

        bool? confirmed = await DialogService.Confirm("Are you absolutely sure you want to delete this item?", "Delete Confirmation", options);

        if (confirmed == true)
        {
            await Delete(id);
        }
    }

    async Task Delete(int id)
    {
        m_DSRShopPaymentHistory.DeleteDSRShopPaymentHistory(id);
        notificationComponent.Show("Delete Summary", "Payment has been Deleted successfully", NotificationSeverity.Error);

        await LoadData();
        StateHasChanged();
    }


    private void CloseModal()
    {
        showModal = false;
    }

    private void Cancel()
    {
        _navigationManager.NavigateTo($"/ShopPaymentHistory");
    }


    public DateTime? fromDate
    {
        get => _fromDate;
        set
        {
            if (_fromDate != value)
            {
                _fromDate = value;
                FilterData();
            }
        }
    }

    public DateTime? toDate
    {
        get => _toDate;
        set
        {
            if (_toDate != value)
            {
                _toDate = value;
                FilterData();
            }
        }
    }


    private void OnSearch(ChangeEventArgs e)
    {
        search = e.Value?.ToString() ?? string.Empty;
        FilterData();
    }

    private void FilterData()
    {
        if (string.IsNullOrWhiteSpace(search))
        {
            FilterDSRShopPaymentHistoryList = DSRShopPaymentHistoryList;
        }
        else
        {
            FilterDSRShopPaymentHistoryList = DSRShopPaymentHistoryList.Where(c =>
                (!string.IsNullOrEmpty(c.Customer.Name) && c.Customer.Name.Contains(search, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(c.AmountPaid.ToString()) && c.AmountPaid.ToString().Contains(search, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(c.PaymentDate.ToString()) && c.PaymentDate.ToString().Contains(search, StringComparison.OrdinalIgnoreCase))
            ).ToList();
        }


        // Apply date filtering with proper date-only comparison
        if (fromDate.HasValue || toDate.HasValue)
        {
            // Convert to DateOnly for comparison (or use DateTime.Date)
            var filterFrom = fromDate?.Date ?? DateTime.MinValue;
            var filterTo = toDate?.Date.AddDays(1) ?? DateTime.MaxValue; // Add 1 day to include entire end date

            FilterDSRShopPaymentHistoryList = FilterDSRShopPaymentHistoryList.Where(x =>
                x.PaymentDate.Date >= filterFrom &&
                x.PaymentDate.Date < filterTo
            ).ToList();
        }

    }

    public async Task ExportToPdf()
    {
        if (!ValidationHelper.ValidateAndNotify(FilterDSRShopPaymentHistoryList, notificationComponent))
            return;

        var document = Document.Create(container =>
        {
            container.Page(page =>
            {
                // Set individual margins
                page.MarginTop(20);     // Top margin
                page.MarginBottom(20);  // Bottom margin
                page.MarginLeft(40);    // Left margin
                page.MarginRight(40);   // Right margin

                page.Size(PageSizes.A4);
                page.DefaultTextStyle(style => style.FontSize(10));

                page.Header().Element(ComposeHeader);

                page.Content()
                    .PaddingVertical(10)
                    .Table(table =>
                    {
                        table.ColumnsDefinition(columns =>
                        {
                            columns.RelativeColumn(3);
                            columns.RelativeColumn(2);
                            columns.RelativeColumn(3);
                            columns.RelativeColumn(3);
                        });

                        // Header
                        table.Header(header =>
                        {
                            header.Cell().Background("#f5f5f5").Padding(5).Text("Shop Name").Bold();
                            header.Cell().Background("#f5f5f5").Padding(5).Text("Amount Paid").Bold();
                            header.Cell().Background("#f5f5f5").Padding(5).Text("Referred By").Bold();
                            header.Cell().Background("#f5f5f5").Padding(5).Text("Date Time").Bold();
                        });

                        // Data rows
                        foreach (var customer in FilterDSRShopPaymentHistoryList)
                        {
                            table.Cell().PaddingVertical(5).PaddingHorizontal(5).Text(customer.Shop.Name);
                            table.Cell().PaddingVertical(5).PaddingHorizontal(5).Text($"৳{customer.AmountPaid:N2}");
                            table.Cell().PaddingVertical(5).PaddingHorizontal(5).Text(customer.Customer.Name);
                            table.Cell().PaddingVertical(5).PaddingHorizontal(5).Text(customer.PaymentDate);
                        }

                        // Total Row
                        table.Cell().ColumnSpan(1).PaddingVertical(5).PaddingHorizontal(5).AlignRight().Text("Total").Bold();
                        table.Cell().PaddingVertical(5).PaddingHorizontal(5).Text($"৳{FilterDSRShopPaymentHistoryList.Sum(x => x.AmountPaid):N2}").Bold();
                        table.Cell().ColumnSpan(2).PaddingVertical(5).PaddingHorizontal(5).Text("").Bold();
                    });

                page.Footer().Row(row =>
                    {
                        row.RelativeItem().AlignLeft().Text(DateTime.Now.ToString("dd/MM/yyyy HH:mm"));
                        row.RelativeItem().AlignCenter().Text(text =>
                        {
                            text.CurrentPageNumber();
                            text.Span(" / ");
                            text.TotalPages();
                        });
                        row.RelativeItem(); // Empty space for right side (optional)
                    });
            });
        });

        using var stream = new MemoryStream();
        document.GeneratePdf(stream);

        var fileName = $"{ShopName} Payment TransactionList_{DateTime.Now:yyyyMMddHHmmss}.pdf";
        await JSRuntime.InvokeVoidAsync("downloadFile", fileName, "application/pdf", stream.ToArray());
    }

    void ComposeHeader(IContainer container)
    {
        var company = m_Lookup.GetCompanyInfo();

        container.Row(row =>
        {
            row.RelativeItem().Column(column =>
            {
                column.Item().AlignCenter().Text($"{company.CompanyName}").Bold().FontSize(16);
                column.Item().AlignCenter().Text($"{company.Address}").FontSize(10);
                column.Item().AlignCenter().Text($"{ShopName} Payment Transaction History List Report").Bold().FontSize(10);
            });
        });
    }

}