@page "/ShopPaymentDetails/{shopId:int}"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
<Message @ref="notificationComponent" />
<h3>Shop Transaction Histories</h3>

@if (FilterShopDuePaymentSummaryList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card-body p-0">
        
        <div class="d-flex align-items-center mb-3" style="width: 100%;">
            <!-- Back Button -->
            <RadzenButton Text="Back" ButtonStyle="ButtonStyle.Secondary" Click="Cancel" Class="m-2" />

            <!-- Search Box -->
            <div class="d-flex align-items-center border rounded me-3" style="width: fit-content;">
                <!-- Search Icon -->
                <span class="ps-2" style="font-size: 1.2rem; color: #6c757d;">
                    <i class="fas fa-search"></i>
                </span>

                <!-- Search Text Box -->
                <RadzenTextBox @bind-Value="@search" TValue="string" Placeholder="Search..." @oninput="OnSearch"
                               Style="border: none; box-shadow: none; padding-left: 0.5rem;" />
            </div>

            <!-- Export Button -->
            <div class="d-flex align-items-center border rounded me-3" style="width: fit-content;">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem;" Wrap="FlexWrap.Wrap" Style="padding-left: 0.10rem;">
                    <RadzenButton Text="Export To PDF" Icon="picture_as_pdf" Click="@(args => ExportToPdf())" />
                </RadzenStack>
            </div>

            <!-- Spacer to push dates to the right -->
            <div class="flex-grow-1"></div>

            <!-- Date Filter - Now aligned to the right with consistent widths -->
            <div class="d-flex align-items-center">
                <div class="d-flex align-items-center me-3">
                    <RadzenDatePicker @bind-Value="fromDate" DateFormat="yyyy-MM-dd" Placeholder="Select Start Date"
                                      Style="width: 180px;" />
                </div>
                <div class="d-flex align-items-center">
                    <RadzenDatePicker @bind-Value="toDate" DateFormat="yyyy-MM-dd" Placeholder="Select End Date"
                                      Style="width: 180px;" />
                </div>
            </div>
        </div>

        <RadzenDataGrid Data="@FilterShopDuePaymentSummaryList" TItem="ShopDuePaymentSummary" PageSize="10" AllowPaging="true" AllowSorting="true" AllowFiltering="false">
            <Columns>
                <RadzenDataGridColumn TItem="ShopDuePaymentSummary" Title="Shop Name" Width="100px">
                    <Template Context="context">
                        @context.ShopName
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ShopDuePaymentSummary" Title="Owner Name" Width="100px">
                    <Template Context="context">
                        @context.OwnerName
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ShopDuePaymentSummary" Title="Area" Width="200px">
                    <Template Context="context">
                        @context.Area
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="ShopDuePaymentSummary" Title="Due Amount" Width="100px" TextAlign="TextAlign.Right">
                    <Template Context="item">
                        <div>৳@item.ShopDueAmount.ToString("N2")</div>
                    </Template>
                    <FooterTemplate>
                        <div class="text-end fw-bold">৳@FilterShopDuePaymentSummaryList.Sum(o => o.ShopDueAmount).ToString("N2")</div>
                    </FooterTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ShopDuePaymentSummary" Title="Paid Amount" Width="100px" TextAlign="TextAlign.Right">
                    <Template Context="item">
                        <div >৳@item.ShopPaidAmount.ToString("N2")</div>
                    </Template>
                    <FooterTemplate>
                        <div class="text-end fw-bold">৳@FilterShopDuePaymentSummaryList.Sum(o => o.ShopPaidAmount).ToString("N2")</div>
                    </FooterTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ShopDuePaymentSummary" Property="@nameof(ShopDuePaymentSummary.Date)" Title="Date Time" Width="150px">
                    <FooterTemplate>
                        <div class=" fw-bold">
                            ৳@((FilterShopDuePaymentSummaryList.Sum(o => o.ShopDueAmount) - FilterShopDuePaymentSummaryList.Sum(o => o.ShopPaidAmount)).ToString("N2"))
                        </div>
                    </FooterTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
}


@code {

    [Parameter]
    public int shopId { get; set; }

    [Inject]
    private IDSRShopPaymentHistory m_DSRShopPaymentHistory { get; set; }


    [Inject]
    private ISRDiscount m_SRDiscount { get; set; }

    [Inject]
    private NavigationManager _navigationManager { get; set; }

    public IEnumerable<ShopDuePaymentSummary> ShopDuePaymentSummaryList { get; set; } = new List<ShopDuePaymentSummary>();
    public IEnumerable<ShopDuePaymentSummary> FilterShopDuePaymentSummaryList { get; set; } = new List<ShopDuePaymentSummary>();

    [Inject]
    private ILookup m_Lookup { get; set; }

    [Inject]
    private IJSRuntime JSRuntime { get; set; }


    private string search = string.Empty;
    private string ShopName = string.Empty;


    private DateTime? _fromDate;
    private DateTime? _toDate;
    private Message notificationComponent;

    protected override async Task OnInitializedAsync()
    {
        ShopName = m_Lookup.GetShop(shopId).Name;
        ShopDuePaymentSummaryList = await m_DSRShopPaymentHistory.GetShopDuePaymentSummary(shopId);        
        FilterShopDuePaymentSummaryList = ShopDuePaymentSummaryList;
    }

    private void Cancel()
    {
        _navigationManager.NavigateTo($"/ShopPaymentHistory");
    }


    public DateTime? fromDate
    {
        get => _fromDate;
        set
        {
            if (_fromDate != value)
            {
                _fromDate = value;
                FilterData();
            }
        }
    }

    public DateTime? toDate
    {
        get => _toDate;
        set
        {
            if (_toDate != value)
            {
                _toDate = value;
                FilterData();
            }
        }
    }


    private void OnSearch(ChangeEventArgs e)
    {
        search = e.Value?.ToString() ?? string.Empty;
        FilterData();
    }
    private void FilterData()
    {
        if (string.IsNullOrWhiteSpace(search))
        {
            FilterShopDuePaymentSummaryList = ShopDuePaymentSummaryList;
        }
        else
        {
            FilterShopDuePaymentSummaryList = ShopDuePaymentSummaryList.Where(c =>
                (c.ShopName != null && c.ShopName.Contains(search, StringComparison.OrdinalIgnoreCase)) ||
                (c.Area != null && c.Area.Contains(search, StringComparison.OrdinalIgnoreCase)) ||
                (c.ShopPaidAmount.ToString().Contains(search, StringComparison.OrdinalIgnoreCase)) ||
                (c.ShopDueAmount.ToString().Contains(search, StringComparison.OrdinalIgnoreCase)) ||
                (c.Date.ToString("yyyy-MM-dd").Contains(search, StringComparison.OrdinalIgnoreCase)) ||
                (c.OwnerName != null && c.OwnerName.Contains(search, StringComparison.OrdinalIgnoreCase))
            ).ToList();
        }

        // Date filtering
        if (fromDate.HasValue || toDate.HasValue)
        {
            var filterFrom = fromDate?.Date ?? DateTime.MinValue;
            var filterTo = toDate?.Date.AddDays(1) ?? DateTime.MaxValue;

            FilterShopDuePaymentSummaryList = FilterShopDuePaymentSummaryList
                .Where(x => x.Date.Date >= filterFrom && x.Date.Date < filterTo)
                .ToList();
        }
    }
    public async Task ExportToPdf()
    {
        if (!ValidationHelper.ValidateAndNotify(FilterShopDuePaymentSummaryList, notificationComponent))
            return;

        var document = Document.Create(container =>
        {
            container.Page(page =>
            {
                // Set individual margins
                page.MarginTop(20);     // Top margin
                page.MarginBottom(20);  // Bottom margin
                page.MarginLeft(40);    // Left margin
                page.MarginRight(40);   // Right margin

                page.Size(PageSizes.A4);
                page.DefaultTextStyle(style => style.FontSize(10));

                page.Header().Element(ComposeHeader);

                page.Content()
                    .PaddingVertical(10)
                    .Table(table =>
                    {
                        table.ColumnsDefinition(columns =>
                        {
                            columns.RelativeColumn(2);
                            columns.RelativeColumn(2);
                            columns.RelativeColumn(3);
                            columns.RelativeColumn(2);
                            columns.RelativeColumn(2);
                            columns.RelativeColumn(2);
                        });

                        // Header
                        table.Header(header =>
                        {
                            header.Cell().Background("#f5f5f5").Padding(5).Text("Shop Name").Bold();
                            header.Cell().Background("#f5f5f5").Padding(5).Text("Owner Name").Bold();
                            header.Cell().Background("#f5f5f5").Padding(5).Text("Area").Bold();
                            header.Cell().Background("#f5f5f5").Padding(5).Text("Due Amount").Bold();
                            header.Cell().Background("#f5f5f5").Padding(5).Text("Paid Amount").Bold();
                            header.Cell().Background("#f5f5f5").Padding(5).Text("Date").Bold();
                        });

                        // Data rows
                        foreach (var customer in FilterShopDuePaymentSummaryList)
                        {
                            table.Cell().PaddingVertical(5).PaddingHorizontal(5).Text(customer.ShopName);
                            table.Cell().PaddingVertical(5).PaddingHorizontal(5).Text(customer.OwnerName);
                            table.Cell().PaddingVertical(5).PaddingHorizontal(5).Text(customer.Area);
                            table.Cell().PaddingVertical(5).PaddingHorizontal(5).Text($"৳{customer.ShopDueAmount:N2}");
                            table.Cell().PaddingVertical(5).PaddingHorizontal(5).Text($"৳{customer.ShopPaidAmount:N2}");
                            table.Cell().PaddingVertical(5).PaddingHorizontal(5).Text(customer.Date);
                            
                        }

                         // Total Row
                        table.Cell().ColumnSpan(3).PaddingVertical(5).PaddingHorizontal(5).AlignRight().Text("Total").Bold();
                        table.Cell().PaddingVertical(5).PaddingHorizontal(5).Text($"৳{FilterShopDuePaymentSummaryList.Sum(x => x.ShopDueAmount):N2}").Bold();
                        table.Cell().PaddingVertical(5).PaddingHorizontal(5).Text($"৳{FilterShopDuePaymentSummaryList.Sum(x => x.ShopPaidAmount):N2}").Bold();
                        table.Cell().PaddingVertical(5).PaddingHorizontal(5).Text("").Bold();


                    });

                page.Footer().Row(row =>
                    {
                        row.RelativeItem().AlignLeft().Text(DateTime.Now.ToString("dd/MM/yyyy HH:mm"));
                        row.RelativeItem().AlignCenter().Text(text =>
                        {
                            text.CurrentPageNumber();
                            text.Span(" / ");
                            text.TotalPages();
                        });
                        row.RelativeItem(); // Empty space for right side (optional)
                    });
            });
        });

        using var stream = new MemoryStream();
        document.GeneratePdf(stream);

        var fileName = $"{ShopName} Shop Transaction Histories_{DateTime.Now:yyyyMMddHHmmss}.pdf";
        await JSRuntime.InvokeVoidAsync("downloadFile", fileName, "application/pdf", stream.ToArray());
    }


    void ComposeHeader(IContainer container)
    {
        var company = m_Lookup.GetCompanyInfo();

        container.Row(row =>
        {
            row.RelativeItem().Column(column =>
            {
                column.Item().AlignCenter().Text($"{company.CompanyName}").Bold().FontSize(16);
                column.Item().AlignCenter().Text($"{company.Address}").FontSize(10);
                column.Item().AlignCenter().Text($"{ShopName} Shop Transaction Histories Report").Bold().FontSize(10);
            });
        });
    }

}
