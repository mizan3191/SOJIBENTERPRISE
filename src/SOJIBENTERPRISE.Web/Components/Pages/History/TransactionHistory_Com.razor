@page "/TransactionHistory"

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@inject DialogService DialogService

<Message @ref="notificationComponent" />

<h3>Transaction History</h3>

@if (TransactionHistoryList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card-body p-0">


        <div class="d-flex align-items-center mb-3" style="width: 100%;">
            <RadzenButton Click="@AddNew" Text="Add New" ButtonStyle="ButtonStyle.Success"></RadzenButton>

            <!-- Search Box -->
            <div class="d-flex align-items-center border rounded me-3 mx-3" style="width: fit-content;">
                <!-- Search Icon -->
                <span class="ps-2" style="font-size: 1.2rem; color: #6c757d;">
                    <i class="fas fa-search"></i>
                </span>

                <!-- Search Text Box -->
                <RadzenTextBox @bind-Value="@search" TValue="string" Placeholder="Search..." @oninput="OnSearch"
                               Style="border: none; box-shadow: none; padding-left: 0.5rem;" />
            </div>

            <!-- Export Button -->
            <div class="d-flex align-items-center border rounded me-3" style="width: fit-content;">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem;" Wrap="FlexWrap.Wrap" Style="padding-left: 0.10rem;">
                    <RadzenButton Text="Export To PDF" Icon="picture_as_pdf" Click="@(args => ExportToPdf())" />
                </RadzenStack>
            </div>

            <!-- Spacer to push dates to the right -->
            <div class="flex-grow-1"></div>

            <!-- Date Filter - Now aligned to the right with consistent widths -->
            <div class="d-flex align-items-center">
                <div class="d-flex align-items-center me-3">
                    <RadzenDatePicker @bind-Value="fromDate" DateFormat="yyyy-MM-dd" Placeholder="Select Start Date"
                                      Style="width: 180px;" />
                </div>
                <div class="d-flex align-items-center">
                    <RadzenDatePicker @bind-Value="toDate" DateFormat="yyyy-MM-dd" Placeholder="Select End Date"
                                      Style="width: 180px;" />
                </div>
            </div>
        </div>

        <RadzenDataGrid Data="@FilterTransactionHistoryList" TItem="TransactionHistory" PageSize="10" AllowPaging="true" AllowSorting="true" AllowGrouping="true" AllowFiltering="false">
            <Columns>
                <RadzenDataGridColumn TItem="TransactionHistory" Title="Balance In" Width="80px" TextAlign="TextAlign.Right">
                    <Template Context="item">
                        <div>৳@item.BalanceIn?.ToString("N2")</div>
                    </Template>
                    <FooterTemplate>
                        <div class="text-end fw-bold">৳@FilterTransactionHistoryList.Sum(o => o.BalanceIn ?? 0).ToString("N2")</div>
                    </FooterTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="TransactionHistory" Title="Balance Out" Width="80px" TextAlign="TextAlign.Right">
                    <Template Context="item">
                        <div>৳@item.BalanceOut?.ToString("N2")</div>
                    </Template>
                    <FooterTemplate>
                        <div class="text-end fw-bold">৳@FilterTransactionHistoryList.Sum(o => o.BalanceOut ?? 0).ToString("N2")</div>
                    </FooterTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="TransactionHistory" Title="Current Balance" Width="80px" TextAlign="TextAlign.Right">
                    <Template Context="item">
                        <div>৳@item.CurrentBalance?.ToString("N2")</div>
                    </Template>
                    <FooterTemplate>
                        <div class="text-end fw-bold">৳@(FilterTransactionHistoryList.FirstOrDefault()?.CurrentBalance?.ToString("N2"))</div>
                    </FooterTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="TransactionHistory" Property="@nameof(TransactionHistory.Resone)" Title="Reason" Width="80px" />
                <RadzenDataGridColumn TItem="TransactionHistory" Property="@nameof(TransactionHistory.Date)" Title="Date" Width="100px" />
            </Columns>
        </RadzenDataGrid>
    </div>
}


@if (showModal)
{
    <div class="modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="1" style="display:block">
        <div class="modal-dialog modal-lg modal-dialog-scrollable modal-dialog-centered">
            <div class="modal-content card dataFormPop">
                <div class="modal-header">
                    @* <h3>@(TransactionHistory.Id > 0 ? "Edit TransactionHistory" : "Add TransactionHistory")</h3> *@
                </div>

                <EditForm Model="@TransactionHistory" OnValidSubmit="HandleSubmit">
                    <div class="card dataForm ">
                        <div class="row m-3">
                            <div class="col-md-4 mb-3">
                                <label class="Asterisk">Balance</label>
                                <InputNumber @bind-Value="TransactionHistory.Balance" class="form-control"></InputNumber>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="Asterisk">Balance Type</label>
                                <RadzenDropDown @bind-Value="TransactionHistory.BalanceTypeId"
                                                Data="@BalanceTypeList"
                                                TextProperty="Name"
                                                ValueProperty="Id"
                                                Placeholder="Select Type"
                                                Class="w-100"
                                                AllowFiltering="false"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" />
                            </div>
                            <div class="col-md-4 mb-3">
                                <label>Reason</label>
                                <InputText @bind-Value="TransactionHistory.Resone" class="form-control"></InputText>
                            </div>
                        </div>
                        <br />
                        <div class="col-md-12">
                            <RadzenButton Text="Save" ButtonStyle="ButtonStyle.Primary" Type="submit" Class="m-2" />
                            <RadzenButton Text="Cancel" ButtonStyle="ButtonStyle.Secondary" Click="CloseModal" Class="m-2" />
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}




@code {
    [Inject]
    private ILookup m_Lookup { get; set; }

    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    public IEnumerable<TransactionHistory> TransactionHistoryList { get; set; } = new List<TransactionHistory>();
    public IEnumerable<TransactionHistory> FilterTransactionHistoryList { get; set; } = new List<TransactionHistory>();



    private DateTime? _fromDate;
    private DateTime? _toDate;
    private string search = string.Empty;

    public IEnumerable<Lov> BalanceTypeList { get; set; }

    private bool showModal = false;

    public TransactionHistory TransactionHistory { get; set; }
    private Message notificationComponent;

    protected override async Task OnInitializedAsync()
    {

        BalanceTypeList = new List<Lov>
                    {
                        new Lov { Id = 1, Name = "Debit " },
                        new Lov { Id = 2, Name = "Credit " }
                    };

        await LoadData();
    }


    private async Task HandleSubmit()
    {
        showModal = false;

        if (TransactionHistory.Balance <= 0)
        {
            notificationComponent.Show("Warning!", "Please give a valid amount.", NotificationSeverity.Warning);
            return;
        }

        if (TransactionHistory.BalanceTypeId == 1)
        {
            TransactionHistory.BalanceIn = TransactionHistory.Balance;
        }
        else
        {
            TransactionHistory.BalanceOut = TransactionHistory.Balance;
        }

        var latestBalance = m_Lookup.GetLatestBalance();
        TransactionHistory.CurrentBalance = TransactionHistory.BalanceTypeId == 1
            ? latestBalance + TransactionHistory.Balance
            : latestBalance - TransactionHistory.Balance;

        m_Lookup.CreateTransactionHistory(TransactionHistory);
        notificationComponent.Show("Added Summary", "Transaction has been added", NotificationSeverity.Success);

        await LoadData();
        StateHasChanged();
    }

    private async Task LoadData()
    {
        TransactionHistoryList = await m_Lookup.GetAllTransactionHistory(null, null);
        FilterTransactionHistoryList = TransactionHistoryList;

    }


    private async void LoadSalesHistory()
    {
        TransactionHistoryList = await m_Lookup.GetAllTransactionHistory(fromDate, toDate);
        FilterTransactionHistoryList = TransactionHistoryList;

        FilterData();

        StateHasChanged();
    }


    // async Task ConfirmDelete(int id)
    // {
    //     var options = new ConfirmOptions()
    //         {
    //             OkButtonText = "Yes, Delete",
    //             CancelButtonText = "No, Keep",
    //             ShowClose = true,
    //         };

    //     bool? confirmed = await DialogService.Confirm("Are you absolutely sure you want to delete this item?", "Delete Confirmation", options);

    //     if (confirmed == true)
    //     {
    //         await Delete(id);
    //     }
    // }

    // private async Task Delete(int id)
    // {
    //     try
    //     {
    //         m_Lookup.DeleteTransactionHistory(id);
    //         notificationComponent.Show("Deleted Summary", "Transaction has been Deleted successfully", NotificationSeverity.Error);
    //         await LoadData();
    //     }
    //     catch (Exception ex)
    //     {
    //         Console.WriteLine($"Error in GetItems(): {ex}");
    //         throw;
    //     }
    // }

    private void AddNew()
    {
        TransactionHistory = new TransactionHistory()
            {
                Balance = 0,
                BalanceTypeId = 1,
                Date = DateTime.Now,
            };

        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }

    public DateTime? fromDate
    {
        get => _fromDate;
        set
        {
            if (_fromDate != value)
            {
                _fromDate = value;
                LoadSalesHistory();
            }
        }
    }

    public DateTime? toDate
    {
        get => _toDate;
        set
        {
            if (_toDate != value)
            {
                _toDate = value;
                LoadSalesHistory();
            }
        }
    }


    private void OnSearch(ChangeEventArgs e)
    {
        search = e.Value?.ToString() ?? string.Empty;
        FilterData();
    }

    private void FilterData()
    {
        if (string.IsNullOrWhiteSpace(search))
        {
            FilterTransactionHistoryList = TransactionHistoryList;
        }
        else
        {
            FilterTransactionHistoryList = TransactionHistoryList.Where(c =>
                (!string.IsNullOrEmpty(c.BalanceIn.ToString()) && c.BalanceIn.ToString().Contains(search, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(c.BalanceOut.ToString()) && c.BalanceOut.ToString().Contains(search, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(c.CurrentBalance.ToString()) && c.CurrentBalance.ToString().Contains(search, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(c.Date.ToString()) && c.Date.ToString().Contains(search, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(c.Resone) && c.Resone.Contains(search, StringComparison.OrdinalIgnoreCase))
            ).ToList();
        }


        // Apply date filtering with proper date-only comparison
        if (fromDate.HasValue || toDate.HasValue)
        {
            // Convert to DateOnly for comparison (or use DateTime.Date)
            var filterFrom = fromDate?.Date ?? DateTime.MinValue;
            var filterTo = toDate?.Date.AddDays(1) ?? DateTime.MaxValue; // Add 1 day to include entire end date

            FilterTransactionHistoryList = FilterTransactionHistoryList.Where(x =>
                x.Date.Date >= filterFrom &&
                x.Date.Date < filterTo
            ).ToList();
        }

    }

    public async Task ExportToPdf()
    {
        if (!ValidationHelper.ValidateAndNotify(FilterTransactionHistoryList, notificationComponent))
            return;

        var document = Document.Create(container =>
        {
            container.Page(page =>
            {
                // Set individual margins
                page.MarginTop(20);     // Top margin
                page.MarginBottom(20);  // Bottom margin
                page.MarginLeft(40);    // Left margin
                page.MarginRight(40);   // Right margin

                page.Size(PageSizes.A4);
                page.DefaultTextStyle(style => style.FontSize(10));

                page.Header().Element(ComposeHeader);

                page.Content()
                    .PaddingVertical(10)
                    .Table(table =>
                    {
                        table.ColumnsDefinition(columns =>
                        {
                            columns.RelativeColumn(3);
                            columns.RelativeColumn(3);
                            columns.RelativeColumn(2);
                            columns.RelativeColumn(3.5f);
                            columns.RelativeColumn(1.8f);
                        });

                        // Header
                        table.Header(header =>
                        {
                            header.Cell().Background("#f5f5f5").Padding(5).AlignRight().Text("Balance In").Bold();
                            header.Cell().Background("#f5f5f5").Padding(5).AlignRight().Text("Balance Out").Bold();
                            header.Cell().Background("#f5f5f5").Padding(5).AlignRight().Text("Current Balance").Bold();
                            header.Cell().Background("#f5f5f5").Padding(5).AlignCenter().Text("Reason").Bold();
                            header.Cell().Background("#f5f5f5").Padding(5).AlignCenter().Text("Date").Bold();
                        });

                        // Data rows
                        foreach (var customer in FilterTransactionHistoryList)
                        {
                            table.Cell().PaddingVertical(5).PaddingHorizontal(5).AlignRight().Text($"৳{customer.BalanceIn:N2}");
                            table.Cell().PaddingVertical(5).PaddingHorizontal(5).AlignRight().Text($"৳{customer.BalanceOut:N2}");
                            table.Cell().PaddingVertical(5).PaddingHorizontal(5).AlignRight().Text($"৳{customer.CurrentBalance?.ToString("N2") ?? "0.00"}");
                            table.Cell().PaddingVertical(5).PaddingHorizontal(5).Text(customer.Resone);
                            table.Cell().PaddingVertical(5).PaddingHorizontal(5).Text(customer.Date.ToString("dd/MM/yyyy"));
                        }

                        table.Cell().ColumnSpan(1).PaddingVertical(5).PaddingHorizontal(5).Text("Total:").Bold();
                        table.Cell().ColumnSpan(4).PaddingVertical(10).Text(""); // Adjust column span to match your table
                        // Total Row
                        // table.Cell().ColumnSpan(1).PaddingVertical(5).PaddingHorizontal(5).Text("Total:").Bold();
                        table.Cell().PaddingVertical(5).PaddingHorizontal(5).AlignRight().Text($"৳{FilterTransactionHistoryList.Sum(x => x.BalanceIn):N2}").Bold();
                        table.Cell().PaddingVertical(5).PaddingHorizontal(5).AlignRight().Text($"৳{FilterTransactionHistoryList.Sum(x => x.BalanceOut):N2}").Bold();
                        table.Cell().PaddingVertical(5).PaddingHorizontal(5).AlignRight().Text($"৳{FilterTransactionHistoryList.FirstOrDefault()?.CurrentBalance ?? 0:N2}").Bold();
                        table.Cell().ColumnSpan(2).PaddingVertical(5).PaddingHorizontal(5).Text("").Bold();
                    });

                page.Footer().Row(row =>
                    {
                        row.RelativeItem().AlignLeft().Text(DateTime.Now.ToString("dd/MM/yyyy HH:mm"));
                        row.RelativeItem().AlignCenter().Text(text =>
                        {
                            text.CurrentPageNumber();
                            text.Span(" / ");
                            text.TotalPages();
                        });
                        row.RelativeItem(); // Empty space for right side (optional)
                    });
            });
        });

        using var stream = new MemoryStream();
        document.GeneratePdf(stream);

        var fileName = $"Transaction Histories_{DateTime.Now:yyyyMMddHHmmss}.pdf";
        await JSRuntime.InvokeVoidAsync("downloadFile", fileName, "application/pdf", stream.ToArray());
    }


    void ComposeHeader(IContainer container)
    {
        var company = m_Lookup.GetCompanyInfo();

        container.Row(row =>
        {
            row.RelativeItem().Column(column =>
            {
                column.Item().AlignCenter().Text($"{company.CompanyName}").Bold().FontSize(16);
                column.Item().AlignCenter().Text($"{company.Address}").FontSize(10);
                column.Item().AlignCenter().Text($"Transaction Histories Report").Bold().FontSize(10);
            });
        });
    }
}